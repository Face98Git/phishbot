import praw
import os
import time
from dotenv import load_dotenv
from datetime import datetime, timedelta
import requests
from bs4 import BeautifulSoup
import gspread
from oauth2client.service_account import ServiceAccountCredentials

load_dotenv()

reddit = praw.Reddit(
    client_id=os.getenv("bot_id"),
    client_secret=os.getenv("bot_secret"),
    username=os.getenv("user"),
    password=os.getenv("password"),
    user_agent=os.getenv("user_agent"))

print("Starting script...")

sub = os.getenv("sub")
widget_id = os.getenv("widget_id")
gsheet = os.getenv("gsheet")
raw_data = os.getenv("raw_data")

bands = ["Phish", "Billy Idol", "Soundgarden", "Cyndi Lauper", "Joe Cocker", "Bad Company", "Chubby Checker", "Outkast", "The Black Crowes", "Oasis", "Mariah Carey", "The White Stripes", "Joy Division + New Order", "ManÃ¡"]

previous_difference = None
previous_phish_score = None

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(gsheet, scope) 
client = gspread.authorize(creds)
sheet = client.open("Phish Leaderboard").worksheet("Log")

band_columns = {band: chr(67 + i) for i, band in enumerate(bands)}

def log_to_google_sheet(data):
    next_row = len(sheet.get_all_values()) + 1
    header = sheet.row_values(1)
    sorted_data = [None] * len(header)
    sorted_data[0] = data[0]
    sorted_data[1] = data[1]
    for i, band in enumerate(bands):
        if band in header:
            column_index = header.index(band)
            sorted_data[column_index] = data[2 + i]
    sheet.update(range_name=f'Q{next_row}', values=[[data[2 + len(bands)]]])
    sheet.update(range_name=f'R{next_row}', values=[[data[3 + len(bands)]]])
    sheet.update(range_name=f'S{next_row}', values=[[data[4 + len(bands)]]])
    sheet.update(range_name=f'T{next_row}', values=[[data[5 + len(bands)]]])
    sheet.update(range_name=f'U{next_row}', values=[[data[6 + len(bands)]]])
    sheet.update(range_name=f'V{next_row}', values=[[data[7 + len(bands)]]])
    
    # Update the row with the sorted data
    sheet.update(values=[sorted_data], range_name=f'A{next_row}:V{next_row}')

# Verify band_columns dictionary
print("Band columns mapping:", band_columns)

def update_leaderboard():
    global previous_difference, previous_phish_score
    scores = []
    bands_scores = []
    page = requests.get("https://vote.rockhall.com/leaderboard")
    soup = BeautifulSoup(page.text, 'html.parser')
    phish_score = 0
    for band in bands:
        band_tag = soup.find('span', string=band)
        if band_tag:
            score_tag = band_tag.find_next('span')
            score = int(score_tag.text.replace(',', ''))
            bands_scores.append((band, score))
            scores.append(score)
            print(f"{band}: {score:,}")
            if band == "Phish":
                phish_score = score

    bands_scores.sort(key=lambda x: x[1], reverse=True)
    bands_scores_str = [f"{band}: {score:,}  \n" for band, score in bands_scores]

    if len(scores) > 1:
        top_score = max(scores)
        scores.remove(top_score)
        second_top_score = max(scores)
        difference = top_score - second_top_score
        if previous_difference is not None:
            change_in_lead = difference - previous_difference
            bands_scores_str.insert(0, f"Phish has a {difference:,} vote lead! {change_in_lead:+,} votes!\n\n")
            print(f"Change in lead: {change_in_lead:+,} votes")
        else:
            bands_scores_str.insert(0, f"Phish has a {difference:,} vote lead!\n\n")
            print(f"Phish is ahead by {difference:,} votes!")
        previous_difference = difference
        
    total_votes = sum(scores) + phish_score
    phish_percentage = (phish_score / total_votes) * 100
    bands_scores_str.append("  \n")
    bands_scores_str.append(f"Total votes: {total_votes:,}  \n")
    bands_scores_str.append(f"Phish has {phish_percentage:.2f}% of all votes.  \n")
    print(f"Total votes: {total_votes:,}")
    print(f"Phish has {phish_percentage:.2f}% of all votes.")
    last_updated = datetime.now().strftime("%m-%d %I:%M")
    bands_scores_str.insert(1, "Top 7  \n")

    widget_stats = "".join(bands_scores_str[:9])
    subreddit = reddit.subreddit(sub)
    widgets = subreddit.widgets.sidebar
    for widget in widgets:
        if widget.id == (widget_id):
            widget_content = widget_stats + "  \n" + "Vote @ https://vote.rockhall.com/  \n" + "See the [wiki](https://www.reddit.com/r/phish/wiki/rrhofleaderboard) for more stats!  \n" + f"Last updated: {last_updated}  \n"
            widget.mod.update(text=widget_content)

    days_remaining = (datetime(2025, 4, 21) - datetime.now()).days
    days_elapsed = (datetime.now() - datetime(2025, 2, 12)).days + (datetime.now().hour / 24)
    possible_vote_total = round((phish_score / days_elapsed) * days_remaining)
    bands_scores_str.append("  \n")
    bands_scores_str.append(f"Based on current vote tally, Phish's possible vote total: {possible_vote_total:,}  \n")
    bands_scores_str.append("Current vote total divided by days elapsed, multiplied by days remaining.\n\n")
    print(f"Based on current vote tally, Phish's possible vote total could be: {possible_vote_total:,}")

    previous_phish_score = phish_score

    average_votes_per_day = round(phish_score / days_elapsed)
    bands_scores_str.append(f"Phish has averaged {average_votes_per_day:,} votes per day.\n\n")
    bands_scores_str.append(f"Everyone is free to use this data for whatever they want, just give credit to u/_Face and r/Phish.\n\n")
    bands_scores_str.append(f"Logged vote data can be found here: [Vote Data]({raw_data})\n\n")
    print(f"Phish has averaged {average_votes_per_day:,} votes per day.")
    
    bands_scores_str.insert(9, "~~~~~~~~~~~~~~~~~~~~~~  \n")

    DMB2024 = 586_745
    votes_needed_2024 = DMB2024 - phish_score
    bands_scores_str.insert(17, "  \n")
#    bands_scores_str.insert(18, f"Phish needs {votes_needed_2024:,} more votes to pass DMB 2024 vote total of 586,745.  \n")
    print(f"Phish needs {votes_needed_2024:,} more votes to pass DMB.")

    DMB = 1_005_657
    votes_needed = DMB - phish_score
#    bands_scores_str.insert(19, f"Phish needs {votes_needed:,} more votes to pass DMB 2020 vote total. - Stretch!  \n")
    print(f"Phish needs {votes_needed:,} more votes to pass DMB.")

    BJ = 1_162_146
    bj_votes_needed = BJ - phish_score
#    bands_scores_str.insert(20, f"Phish needs {bj_votes_needed:,} more votes to pass Bon Jovi's 2018 vote total.\n\n")
    print(f"Phish needs {bj_votes_needed:,} more votes to pass Bon Jovi.")        
    bands_scores_str.insert(19,"\n\n")
    bands_scores_str.append("  \n")
    bands_scores_str.append(f"Last updated: {last_updated}\n\n")

    bands_scores_str.pop(1)

    wiki_content = "".join(bands_scores_str)
    subreddit = reddit.subreddit(sub)
    subreddit.wiki["rrhofleaderboard"].edit(content=wiki_content)

    print("End of leaderboard")
    print("Last Updated: ", last_updated)

    date=datetime.now().strftime("%m-%d-%Y")
    utime=datetime.now().strftime("%H:%M:%S")
        
    log_data = [date, utime]
    
    bands_scores.sort(key=lambda x: bands.index(x[0]))    
        
    for band, score in bands_scores:
        log_data.append(score)

    log_data.extend([
        total_votes,
        phish_percentage,
        average_votes_per_day,
        votes_needed,
        bj_votes_needed,
        votes_needed_2024
        ])


    log_to_google_sheet(log_data)
    print("Logged data to Google Sheet")

def send_failure_message():
    try:
        reddit.redditor('_face').message('Script Alert', 'PhishBot stopped working')
        print("Sent failure message to _face")
    except Exception as e:
        print(f"Failed to send message: {e}")

def run_update_leaderboard():
    global previous_difference, previous_phish_score
    retry_attempts = 60
    while retry_attempts > 0:
        try:
            update_leaderboard()
            while True:
                update_leaderboard()
                print("Sleeping for 60 minutes")
                time.sleep(3579)
                print("Running script again.")
        except requests.exceptions.RequestException as e:
            print(f"Network error encountered: {e}. Retrying...")
            retry_attempts -= 1
            time.sleep(60)  # Wait for 1 minute before retrying
        except Exception as e:
            print(f"Script encountered an error: {e}")
            send_failure_message()
            break

run_update_leaderboard()